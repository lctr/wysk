module List where

import Boolean
import Numeric
import Function
import Container

impl Functor [] {
   map
      | f [] = []
      | f (x:xs) = f x : map f xs;

   (/>)
      | y xs = fmap (const y) xs
}

impl Foldable [] {
   foldr
      | f a [] = a
      | f a (x:xs) = foldr f (f x a) xs
}

fn head :: [a] -> Option a
   | [] = None
   | (x:_) = Some x

fn tail :: [a] -> Option [a]
   | [] = None
   | [_] = Some []
   | (_:xs) = Some xs

fn init :: [a] -> Option [a]
   | [] = None
   | [_] = Some []
   | (x:xs) = Some (x : init xs)

fn last :: [a] -> Option a
   | [] = None
   | [x] = Some x
   | (_:xs) = last xs

fn find :: (a -> Bool) -> [a] -> Option a
   | f [] = None
   | f (x:xs) if f x = Some x
   | f (_:xs) = find f xs

fn position :: (a -> Bool) -> [a] -> Option Int
    | f = go 0
      where go
        | n [] = None
        | n (a:as) if f a = Some n
        | n (_:as) = go (n + 1) as

fn filter :: (a -> Bool) -> [a] -> [a]
   | f [] = []
   | f (x:xs) if f x = x : filter f xs
   | f (_:xs) = filter f xs

fn enumerate :: [a] -> [(Int, a)]
   = zip [0..]

#[infixr 6]
fn (++) :: [a] -> [a] -> [a]
   | xs [] = xs
   | [] ys = ys
   | (x:xs) ys = x:(xs ++ ys)


fn partition :: (a -> Bool) -> [a] -> ([a], [a])
   | f [] = ([], [])
   | f xs = go [] [] \> reverse
   where go
      | l r = match
         [] -> (l, r)
         (x:xs) if f x -> go (x:l) r xs

fn take :: Int -> [a] -> [a]
   | n _ if n <= 0 = []
   | _ [] = []
   | n (x:xs) = x : take (n - 1) xs

fn takeWhile :: (a -> Bool) -> [a] -> [a]
   | _ [] = []
   | p (x:xs) if p x = x : takeWhile p xs
   | _ _ = []

fn drop :: Int -> [a] -> [a]
   | n xs if n <= 0 = xs
   | _ [] = []
   | n (_:xs) = drop (n - 1) xs

fn dropWhile :: (a -> Bool) -> [a] -> [a]
   | _ [] = []
   | p xs@(x:xs') = if p x then dropWhile p xs' else xs

fn repeat :: a -> [a]
   | x = xs where xs = x : xs

fn replicate :: Int -> a -> [a]
   | n x = take n (repeat x)

fn cycle :: [a] -> Option [a]
   | xs = [ x | x <- xs ]

fn reverse :: [a] -> [a]
   = foldl (flip (:)) []

fn nth :: Int -> [a] -> Option a
   = go
      where go
        | _ [] = None
        | n xs if n > 0 = go (n - 1) xs
        | 0 (x:_) = Some x

fn zip :: [a] -> [b] -> [(a, b)]
   | [] _ = []
   | _ [] = []
   | (x:xs) (y:ys) = (x, y) : zip xs ys

fn zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
   | f [] _ = []
   | f _ [] = []
   | f (x:xs) (y:ys) = (f x y) : zipWith f xs ys

fn zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
   | [] _ _ = []
   | _ [] _ = []
   | _ _ [] = []
   | (x:xs) (y:ys) (z:zs) = (x, y, z) : zip3 xs ys zs

fn zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
   | [] _ _ _ = []
   | _ [] _ _ = []
   | _ _ [] _ = []
   | _ _ _ [] = []
   | (x:xs) (y:ys) (z:zs) (u:us) = (x, y, z, u) : zip4 xs ys zs us

fn zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
   | [] _ _ _ _ = []
   | _ [] _ _ _ = []
   | _ _ [] _ _ = []
   | _ _ _ [] _ = []
   | _ _ _ _ [] = []
   | (x:xs) (y:ys) (z:zs) (u:us) (v:vs) = (x, y, z, u, v) : zip5 xs ys zs us vs

fn zip6 :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [(a, b, c, d, e, f)]
   | [] _ _ _ _ _ = []
   | _ [] _ _ _ _ = []
   | _ _ [] _ _ _ = []
   | _ _ _ [] _ _ = []
   | _ _ _ _ [] _ = []
   | (x:xs) (y:ys) (z:zs)
     (u:us) (v:vs) (w:ws) = (x, y, z, u, v, w) : zip6 xs ys zs us vs ws

fn push :: [a] -> a -> [a]
   | xs x = xs ++ [x]

#[inline]
fn unzip :: [(a, b)] -> ([a], [b])
   = foldr (\(a, b) (as, bs) -> (a:as, b:bs)) ([], [])

#[inline]
fn unzip3 :: [(a, b, c)] -> ([a], [b], [c])
   = foldr (\(a, b, c) (as, bs, cs) -> (a:as, b:bs, c:cs)) ([], [], [])

#[inline]
fn unzip4 :: [(a, b, c, d)] -> ([a], [b], [c], [d])
    = foldr (\(a, b, c, d) (as, bs, cs, ds) -> (a:as, b:bs, c:cs, d:ds)) ([], [], [])

fn span :: (a -> Bool) -> [a] -> ([a], [a])
   | _ [] = ([], [])
   | p xs@(x:xs') = if p x
      then let (ys, zs) = span p xs' in (x:ys, zs)
      else ([], xs)